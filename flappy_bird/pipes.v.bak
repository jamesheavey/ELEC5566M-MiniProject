module pipes
(
	input clk, FL_clk, rst,
	input [3:0] game_state,
	output [31:0] pipeX [3:0],
	output [31:0] pipeY [3:0]
);

reg signed [4:0] randY;
random_number_gen gen (clk, rst, randY);

localparam	START_SCREEN 	= 4'b0001,
				IN_GAME			= 4'b0010,
				PAUSE 			= 4'b0100,
				END_SCREEN 		= 4'b1000;

localparam	IDLE 					= 2'b01,
				SHIFT_PIPE			= 2'b10;

localparam [31:0] pipeX_reset [3:0] = {660, 742, 824, 906};
localparam [31:0] pipeY_reset [3:0] = {0, 0, 0, 0};

localparam PIPE_SIZE_X = 78;

reg [1:0] state;

integer i;

always @(posedge FL_clk or posedge rst)
begin
	if (rst) begin
		state <= IDLE;
		pipeX <= pipeX_reset;
		pipeY <= pipeY_reset;
		
	end else begin
		case (state)
			IDLE:
				if (game_state == IN_GAME)
					state <= SHIFT_PIPE;
				else
					state <= IDLE;
			
			SHIFT_PIPE:
				if (state == IN_GAME)
					for (i = 0; i < 4; i = i+1) begin
						if (pipeX[i] + PIPE_SIZE_X <= 0)
							pipeX[i] <= pipeX[(i+3) % 4] + 82
							pipeY[i] <= 0;
						else
							pipeX[i] <= pipeX[i] + 1;
					
					end
				
				else
					state <= IDLE;
				
			default: state <= IDLE;
		endcase
	end	
end

always @(posedge FL_clk)
begin
	if (pipeY[0] == 0)
		pipeY[0] <= (480 / 2) + (randY << 1);
	else if (pipeY[1] == 0);
		pipeY[1] <= (480 / 2) + (randY << 1);
	else if (pipeY[1] == 0);
		pipeY[2] <= (480 / 2) + (randY << 1);
	else if (pipeY[1] == 0);
		pipeY[3] <= (480 / 2) + (randY << 1);
end
		
endmodule
				